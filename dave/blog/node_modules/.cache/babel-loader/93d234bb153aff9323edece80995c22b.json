{"ast":null,"code":"var _jsxFileName = \"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/blog/src/features/posts/PostsList.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectAllPosts, getPostsStatus, getPostsError, fetchPosts } from \"./postsSlice\";\nimport { useEffect } from \"react\";\nimport PostsExcerpt from \"./PostsExcerpt\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostsList = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const posts = useSelector(selectAllPosts);\n  const postStatus = useSelector(getPostsStatus);\n  const error = useSelector(getPostsError);\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPosts());\n    }\n  }, [postStatus, dispatch]);\n  let content;\n\n  if (postStatus === 'loading') {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\\"Loading...\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 19\n    }, this);\n  } else if (postStatus === 'succeeded') {\n    const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date));\n    content = orderedPosts.map(post => /*#__PURE__*/_jsxDEV(PostsExcerpt, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 44\n    }, this));\n  } else if (postStatus === 'failed') {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 19\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostsList, \"WVsaUdjlRZdgFV51nhKfVUEst3c=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = PostsList;\nexport default PostsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"sources":["/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/blog/src/features/posts/PostsList.js"],"names":["useSelector","useDispatch","selectAllPosts","getPostsStatus","getPostsError","fetchPosts","useEffect","PostsExcerpt","PostsList","dispatch","posts","postStatus","error","content","orderedPosts","slice","sort","a","b","date","localeCompare","map","post","id"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,aAAzC,EAAwDC,UAAxD,QAA0E,cAA1E;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AAEA,QAAMS,KAAK,GAAGV,WAAW,CAACE,cAAD,CAAzB;AACA,QAAMS,UAAU,GAAGX,WAAW,CAACG,cAAD,CAA9B;AACA,QAAMS,KAAK,GAAGZ,WAAW,CAACI,aAAD,CAAzB;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIK,UAAU,KAAK,MAAnB,EAA2B;AACvBF,MAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACH;AACJ,GAJQ,EAIN,CAACM,UAAD,EAAaF,QAAb,CAJM,CAAT;AAMA,MAAII,OAAJ;;AACA,MAAIF,UAAU,KAAK,SAAnB,EAA8B;AAC1BE,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACH,GAFD,MAEO,IAAIF,UAAU,KAAK,WAAnB,EAAgC;AACnC,UAAMG,YAAY,GAAGJ,KAAK,CAACK,KAAN,GAAcC,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,IAAF,CAAOC,aAAP,CAAqBH,CAAC,CAACE,IAAvB,CAA7B,CAArB;AACAN,IAAAA,OAAO,GAAGC,YAAY,CAACO,GAAb,CAAiBC,IAAI,iBAAI,QAAC,YAAD;AAA4B,MAAA,IAAI,EAAEA;AAAlC,OAAmBA,IAAI,CAACC,EAAxB;AAAA;AAAA;AAAA;AAAA,YAAzB,CAAV;AACH,GAHM,MAGA,IAAIZ,UAAU,KAAK,QAAnB,EAA6B;AAChCE,IAAAA,OAAO,gBAAG;AAAA,gBAAID;AAAJ;AAAA;AAAA;AAAA;AAAA,YAAV;AACH;;AAED,sBACI;AAAA,cACKC;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA5BD;;GAAML,S;UACeP,W,EAEHD,W,EACKA,W,EACLA,W;;;KALZQ,S;AA6BN,eAAeA,SAAf","sourcesContent":["import { useSelector, useDispatch } from \"react-redux\";\nimport { selectAllPosts, getPostsStatus, getPostsError, fetchPosts } from \"./postsSlice\";\nimport { useEffect } from \"react\";\nimport PostsExcerpt from \"./PostsExcerpt\";\n\nconst PostsList = () => {\n    const dispatch = useDispatch();\n\n    const posts = useSelector(selectAllPosts);\n    const postStatus = useSelector(getPostsStatus);\n    const error = useSelector(getPostsError);\n\n    useEffect(() => {\n        if (postStatus === 'idle') {\n            dispatch(fetchPosts())\n        }\n    }, [postStatus, dispatch])\n\n    let content;\n    if (postStatus === 'loading') {\n        content = <p>\"Loading...\"</p>;\n    } else if (postStatus === 'succeeded') {\n        const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date))\n        content = orderedPosts.map(post => <PostsExcerpt key={post.id} post={post} />)\n    } else if (postStatus === 'failed') {\n        content = <p>{error}</p>;\n    }\n\n    return (\n        <section>\n            {content}\n        </section>\n    )\n}\nexport default PostsList"]},"metadata":{},"sourceType":"module"}