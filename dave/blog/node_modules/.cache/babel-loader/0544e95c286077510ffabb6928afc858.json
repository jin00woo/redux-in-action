{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nimport axios from \"axios\";\nconst POSTS_URL = \"https://jsonplaceholder.typicode.com/posts\";\nconst initialState = {\n  posts: [],\n  status: \"idle\",\n  //'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  const response = await axios.get(POSTS_URL);\n  return response.data;\n});\nexport const addNewPost = createAsyncThunk(\"posts/addNewPost\", async initialPost => {\n  const response = await axios.post(POSTS_URL, initialPost);\n  return response.data;\n});\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0\n            }\n          }\n        };\n      }\n\n    },\n\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    }\n\n  },\n\n  extraReducers(builder) {\n    builder.addCase(fetchPosts.pending, (state, action) => {\n      state.status = \"loading\";\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = \"succeeded\"; // Adding date and reactions\n\n      let min = 1;\n      const loadedPosts = action.payload.map(post => {\n        post.date = sub(new Date(), {\n          minutes: min++\n        }).toISOString();\n        post.reactions = {\n          thumbsUp: 0,\n          wow: 0,\n          heart: 0,\n          rocket: 0,\n          coffee: 0\n        };\n        return post;\n      }); // Add any fetched posts to the array\n\n      state.posts = state.posts.concat(loadedPosts);\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    }).addCase(addNewPost.fulfilled, (state, action) => {\n      // Fix for API post IDs:\n      // Creating sortedPosts & assigning the id\n      // would be not be needed if the fake API\n      // returned accurate new post IDs\n      const sortedPosts = state.posts.sort((a, b) => {\n        if (a.id > b.id) return 1;\n        if (a.id < b.id) return -1;\n        return 0;\n      });\n      action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1; // End fix for fake API post IDs\n\n      action.payload.userId = Number(action.payload.userId);\n      action.payload.date = new Date().toISOString();\n      action.payload.reactions = {\n        thumbsUp: 0,\n        hooray: 0,\n        heart: 0,\n        rocket: 0,\n        eyes: 0\n      };\n      console.log(action.payload);\n      state.posts.push(action.payload);\n    });\n  }\n\n});\nexport const selectAllPosts = state => state.posts.posts;\nexport const getPostsStatus = state => state.posts.status;\nexport const getPostsError = state => state.posts.error;\nexport const selectPostById = (state, postId) => state.posts.posts.find(post => post.id === postId);\nexport const {\n  postAdded,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/blog/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","sub","axios","POSTS_URL","initialState","posts","status","error","fetchPosts","response","get","data","addNewPost","initialPost","post","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","title","content","userId","id","date","Date","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","reactionAdded","postId","reaction","existingPost","find","extraReducers","builder","addCase","pending","fulfilled","min","loadedPosts","map","minutes","concat","rejected","message","sortedPosts","sort","a","b","length","Number","hooray","eyes","console","log","selectAllPosts","getPostsStatus","getPostsError","selectPostById","actions"],"mappings":"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","sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nimport axios from \"axios\";\n\nconst POSTS_URL = \"https://jsonplaceholder.typicode.com/posts\";\n\nconst initialState = {\n  posts: [],\n  status: \"idle\", //'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null,\n};\n\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  const response = await axios.get(POSTS_URL);\n  return response.data;\n});\n\nexport const addNewPost = createAsyncThunk(\n  \"posts/addNewPost\",\n  async (initialPost) => {\n    const response = await axios.post(POSTS_URL, initialPost);\n    return response.data;\n  }\n);\n\n\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0,\n            },\n          },\n        };\n      },\n    },\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload;\n      const existingPost = state.posts.find((post) => post.id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchPosts.pending, (state, action) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = \"succeeded\";\n        // Adding date and reactions\n        let min = 1;\n        const loadedPosts = action.payload.map((post) => {\n          post.date = sub(new Date(), { minutes: min++ }).toISOString();\n          post.reactions = {\n            thumbsUp: 0,\n            wow: 0,\n            heart: 0,\n            rocket: 0,\n            coffee: 0,\n          };\n          return post;\n        });\n\n        // Add any fetched posts to the array\n        state.posts = state.posts.concat(loadedPosts);\n      })\n      .addCase(fetchPosts.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.error.message;\n      })\n      .addCase(addNewPost.fulfilled, (state, action) => {\n        // Fix for API post IDs:\n        // Creating sortedPosts & assigning the id\n        // would be not be needed if the fake API\n        // returned accurate new post IDs\n        const sortedPosts = state.posts.sort((a, b) => {\n          if (a.id > b.id) return 1;\n          if (a.id < b.id) return -1;\n          return 0;\n        });\n        action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1;\n        // End fix for fake API post IDs\n\n        action.payload.userId = Number(action.payload.userId);\n        action.payload.date = new Date().toISOString();\n        action.payload.reactions = {\n          thumbsUp: 0,\n          hooray: 0,\n          heart: 0,\n          rocket: 0,\n          eyes: 0,\n        };\n        console.log(action.payload);\n        state.posts.push(action.payload);\n      });\n  },\n});\n\nexport const selectAllPosts = (state) => state.posts.posts;\nexport const getPostsStatus = (state) => state.posts.status;\nexport const getPostsError = (state) => state.posts.error;\n\nexport const selectPostById = (state, postId) =>\n  state.posts.posts.find((post) => post.id === postId);\n\nexport const { postAdded, reactionAdded } = postsSlice.actions;\n\nexport default postsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}