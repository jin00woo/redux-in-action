{"ast":null,"code":"var _jsxFileName = \"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/blog/src/features/posts/EditPostForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectPostById, updatePost, deletePost } from \"./postsSlice\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { selectAllUsers } from \"../users/usersSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditPostForm = () => {\n  _s();\n\n  const {\n    postId\n  } = useParams();\n  const navigate = useNavigate();\n  const post = useSelector(state => selectPostById(state, Number(postId)));\n  const users = useSelector(selectAllUsers);\n  const [title, setTitle] = useState(post === null || post === void 0 ? void 0 : post.title);\n  const [content, setContent] = useState(post === null || post === void 0 ? void 0 : post.body);\n  const [userId, setUserId] = useState(post === null || post === void 0 ? void 0 : post.userId);\n  const [requestStatus, setRequestStatus] = useState(\"idle\");\n  const dispatch = useDispatch();\n\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Post not found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  }\n\n  const onTitleChanged = e => setTitle(e.target.value);\n\n  const onContentChanged = e => setContent(e.target.value);\n\n  const onAuthorChanged = e => setUserId(e.target.value);\n\n  const canSave = [title, content, userId].every(Boolean) && requestStatus === \"idle\";\n\n  const onSavePostClicked = () => {\n    if (canSave) {\n      try {\n        setRequestStatus(\"pending\");\n        dispatch(updatePost({\n          id: post.id,\n          title,\n          body: content,\n          userId,\n          reactions: post.reactions\n        })).unwrap();\n        setTitle(\"\");\n        setContent(\"\");\n        setUserId(\"\");\n        navigate(`/post/${postId}`);\n      } catch (err) {\n        console.error(\"Failed to save the post: \", err);\n      } finally {\n        setRequestStatus(\"idle\");\n      }\n    }\n  };\n\n  const userOptions = users.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: user.id,\n    children: user.name\n  }, user.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this));\n\n  const onDeletePostClicked = () => {\n    try {\n      setRequestStatus(\"pending\");\n      dispatch(deletePost({\n        id: post.i\n      })).unwrap();\n      setTitle(\"\");\n      setContent(\"\");\n      setUserId(\"\");\n      navigate(`/`);\n    } catch (err) {\n      console.error(\"Failed to delete the post: \", err);\n    } finally {\n      setRequestStatus(\"idle\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postTitle\",\n        children: \"Post Title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postTitle\",\n        name: \"postTitle\",\n        value: title,\n        onChange: onTitleChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postAuthor\",\n        children: \"Author:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"postAuthor\",\n        defaultValue: userId,\n        onChange: onAuthorChanged,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), userOptions]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postContent\",\n        children: \"Content:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"postContent\",\n        name: \"postContent\",\n        value: content,\n        onChange: onContentChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onSavePostClicked,\n        disabled: !canSave,\n        children: \"Save Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditPostForm, \"dyE/xwUEQL9iszc2gF/xKTC/qhs=\", false, function () {\n  return [useParams, useNavigate, useSelector, useSelector, useDispatch];\n});\n\n_c = EditPostForm;\nexport default EditPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPostForm\");","map":{"version":3,"sources":["/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/blog/src/features/posts/EditPostForm.js"],"names":["React","useState","useDispatch","useSelector","selectPostById","updatePost","deletePost","useNavigate","useParams","selectAllUsers","EditPostForm","postId","navigate","post","state","Number","users","title","setTitle","content","setContent","body","userId","setUserId","requestStatus","setRequestStatus","dispatch","onTitleChanged","e","target","value","onContentChanged","onAuthorChanged","canSave","every","Boolean","onSavePostClicked","id","reactions","unwrap","err","console","error","userOptions","map","user","name","onDeletePostClicked","i"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectPostById, updatePost, deletePost } from \"./postsSlice\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { selectAllUsers } from \"../users/usersSlice\";\n\nconst EditPostForm = () => {\n  const { postId } = useParams();\n  const navigate = useNavigate();\n  const post = useSelector((state) => selectPostById(state, Number(postId)));\n  const users = useSelector(selectAllUsers);\n\n  const [title, setTitle] = useState(post?.title);\n  const [content, setContent] = useState(post?.body);\n  const [userId, setUserId] = useState(post?.userId);\n  const [requestStatus, setRequestStatus] = useState(\"idle\");\n\n  const dispatch = useDispatch();\n\n  if (!post) {\n    return (\n      <section>\n        <h2>Post not found!</h2>\n      </section>\n    );\n  }\n\n  const onTitleChanged = (e) => setTitle(e.target.value);\n  const onContentChanged = (e) => setContent(e.target.value);\n  const onAuthorChanged = (e) => setUserId(e.target.value);\n\n  const canSave =\n    [title, content, userId].every(Boolean) && requestStatus === \"idle\";\n\n  const onSavePostClicked = () => {\n    if (canSave) {\n      try {\n        setRequestStatus(\"pending\");\n        dispatch(\n          updatePost({\n            id: post.id,\n            title,\n            body: content,\n            userId,\n            reactions: post.reactions,\n          })\n        ).unwrap();\n\n        setTitle(\"\");\n        setContent(\"\");\n        setUserId(\"\");\n        navigate(`/post/${postId}`);\n      } catch (err) {\n        console.error(\"Failed to save the post: \", err);\n      } finally {\n        setRequestStatus(\"idle\");\n      }\n    }\n  };\n\n  const userOptions = users.map((user) => (\n    <option key={user.id} value={user.id}>\n      {user.name}\n    </option>\n  ));\n\n  const onDeletePostClicked = () => {\n    try {\n      setRequestStatus(\"pending\");\n      dispatch(deletePost({ id: post.i })).unwrap();\n      setTitle(\"\");\n      setContent(\"\");\n      setUserId(\"\");\n      navigate(`/`);\n    } catch (err) {\n      console.error(\"Failed to delete the post: \", err);\n    } finally {\n      setRequestStatus(\"idle\");\n    }\n  };\n\n  return (\n    <section>\n      <h2>Edit Post</h2>\n      <form>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input\n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          value={title}\n          onChange={onTitleChanged}\n        />\n        <label htmlFor=\"postAuthor\">Author:</label>\n        <select\n          id=\"postAuthor\"\n          defaultValue={userId}\n          onChange={onAuthorChanged}\n        >\n          <option value=\"\"></option>\n          {userOptions}\n        </select>\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          value={content}\n          onChange={onContentChanged}\n        />\n\n        <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\n          Save Post\n        </button>\n      </form>\n    </section>\n  );\n};\n\nexport default EditPostForm;\n"]},"metadata":{},"sourceType":"module"}