{"ast":null,"code":"var _jsxFileName = \"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/EditPostForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPostById, updatePost, deletePost } from './postsSlice';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { selectAllUsers } from \"../users/usersSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditPostForm = () => {\n  _s();\n\n  const {\n    postId\n  } = useParams();\n  const navigate = useNavigate();\n  const post = useSelector(state => selectPostById(state, Number(postId)));\n  const users = useSelector(selectAllUsers);\n  const [title, setTitle] = useState(post === null || post === void 0 ? void 0 : post.title);\n  const [content, setContent] = useState(post === null || post === void 0 ? void 0 : post.body);\n  const [userId, setUserId] = useState(post === null || post === void 0 ? void 0 : post.userId);\n  const [requestStatus, setRequestStatus] = useState('idle');\n  const dispatch = useDispatch();\n\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Post not found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this);\n  }\n\n  const onTitleChanged = e => setTitle(e.target.value);\n\n  const onContentChanged = e => setContent(e.target.value);\n\n  const onAuthorChanged = e => setUserId(Number(e.target.value));\n\n  const canSave = [title, content, userId].every(Boolean) && requestStatus === 'idle';\n\n  const onSavePostClicked = () => {\n    if (canSave) {\n      try {\n        setRequestStatus('pending');\n        dispatch(updatePost({\n          id: post.id,\n          title,\n          body: content,\n          userId,\n          reactions: post.reactions\n        })).unwrap();\n        setTitle('');\n        setContent('');\n        setUserId('');\n        navigate(`/post/${postId}`);\n      } catch (err) {\n        console.error('Failed to save the post', err);\n      } finally {\n        setRequestStatus('idle');\n      }\n    }\n  };\n\n  const usersOptions = users.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: user.id,\n    children: user.name\n  }, user.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this));\n\n  const onDeletePostClicked = () => {\n    try {\n      setRequestStatus('pending');\n      dispatch(deletePost({\n        id: post.id\n      })).unwrap();\n      setTitle('');\n      setContent('');\n      setUserId('');\n      navigate('/');\n    } catch (err) {\n      console.error('Failed to delete the post', err);\n    } finally {\n      setRequestStatus('idle');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postTitle\",\n        children: \"Post Title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postTitle\",\n        name: \"postTitle\",\n        value: title,\n        onChange: onTitleChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postAuthor\",\n        children: \"Author:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"postAuthor\",\n        value: userId,\n        onChange: onAuthorChanged,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), usersOptions]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postContent\",\n        children: \"Content:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"postContent\",\n        name: \"postContent\",\n        value: content,\n        onChange: onContentChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onSavePostClicked,\n        disabled: !canSave,\n        children: \"Save Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"deleteButton\",\n        type: \"button\",\n        onClick: onDeletePostClicked,\n        children: \"Delete Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditPostForm, \"Oxgquyn1S8zYFOowCPFlsYpny2Y=\", false, function () {\n  return [useParams, useNavigate, useSelector, useSelector, useDispatch];\n});\n\n_c = EditPostForm;\nexport default EditPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPostForm\");","map":{"version":3,"sources":["/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/EditPostForm.js"],"names":["useState","useDispatch","useSelector","selectPostById","updatePost","deletePost","useParams","useNavigate","selectAllUsers","EditPostForm","postId","navigate","post","state","Number","users","title","setTitle","content","setContent","body","userId","setUserId","requestStatus","setRequestStatus","dispatch","onTitleChanged","e","target","value","onContentChanged","onAuthorChanged","canSave","every","Boolean","onSavePostClicked","id","reactions","unwrap","err","console","error","usersOptions","map","user","name","onDeletePostClicked"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectPostById, updatePost, deletePost } from './postsSlice'\nimport { useParams, useNavigate } from 'react-router-dom'\n\nimport { selectAllUsers } from \"../users/usersSlice\";\n\nconst EditPostForm = () => {\n    const { postId } = useParams()\n    const navigate = useNavigate()\n\n    const post = useSelector((state) => selectPostById(state, Number(postId)))\n    const users = useSelector(selectAllUsers)\n\n    const [title, setTitle] = useState(post?.title)\n    const [content, setContent] = useState(post?.body)\n    const [userId, setUserId] = useState(post?.userId)\n    const [requestStatus, setRequestStatus] = useState('idle')\n\n    const dispatch = useDispatch()\n\n    if (!post) {\n        return (\n            <section>\n                <h2>Post not found!</h2>\n            </section>\n        )\n    }\n\n    const onTitleChanged = e => setTitle(e.target.value)\n    const onContentChanged = e => setContent(e.target.value)\n    const onAuthorChanged = e => setUserId(Number(e.target.value))\n\n    const canSave = [title, content, userId].every(Boolean) && requestStatus === 'idle';\n\n    const onSavePostClicked = () => {\n        if (canSave) {\n            try {\n                setRequestStatus('pending')\n                dispatch(updatePost({ id: post.id, title, body: content, userId, reactions: post.reactions })).unwrap()\n\n                setTitle('')\n                setContent('')\n                setUserId('')\n                navigate(`/post/${postId}`)\n            } catch (err) {\n                console.error('Failed to save the post', err)\n            } finally {\n                setRequestStatus('idle')\n            }\n        }\n    }\n\n    const usersOptions = users.map(user => (\n        <option\n            key={user.id}\n            value={user.id}\n        >{user.name}</option>\n    ))\n\n    const onDeletePostClicked = () => {\n        try {\n            setRequestStatus('pending')\n            dispatch(deletePost({ id: post.id })).unwrap()\n\n            setTitle('')\n            setContent('')\n            setUserId('')\n            navigate('/')\n        } catch (err) {\n            console.error('Failed to delete the post', err)\n        } finally {\n            setRequestStatus('idle')\n        }\n    }\n\n    return (\n        <section>\n            <h2>Edit Post</h2>\n            <form>\n                <label htmlFor=\"postTitle\">Post Title:</label>\n                <input\n                    type=\"text\"\n                    id=\"postTitle\"\n                    name=\"postTitle\"\n                    value={title}\n                    onChange={onTitleChanged}\n                />\n                <label htmlFor=\"postAuthor\">Author:</label>\n                <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n                    <option value=\"\"></option>\n                    {usersOptions}\n                </select>\n                <label htmlFor=\"postContent\">Content:</label>\n                <textarea\n                    id=\"postContent\"\n                    name=\"postContent\"\n                    value={content}\n                    onChange={onContentChanged}\n                />\n                <button\n                    type=\"button\"\n                    onClick={onSavePostClicked}\n                    disabled={!canSave}\n                >\n                    Save Post\n                </button>\n                <button className=\"deleteButton\"\n                    type=\"button\"\n                    onClick={onDeletePostClicked}\n                >\n                    Delete Post\n                </button>\n            </form>\n        </section>\n    )\n}\n\nexport default EditPostForm"]},"metadata":{},"sourceType":"module"}