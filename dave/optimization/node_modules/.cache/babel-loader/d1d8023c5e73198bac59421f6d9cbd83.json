{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from 'date-fns';\nimport axios from \"axios\";\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  //'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await axios.get(POSTS_URL);\n  return response.data;\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async initialPost => {\n  const response = await axios.post(POSTS_URL, initialPost);\n  return response.data;\n});\nexport const updatePost = createAsyncThunk('posts/updatePost', async initialPost => {\n  const {\n    id\n  } = initialPost;\n\n  try {\n    const response = await axios.put(`${POSTS_URL}/${id}`, initialPost);\n    return response.data;\n  } catch (err) {\n    //return err.message;\n    return initialPost; // only for testing Redux!\n  }\n});\nexport const deletePost = createAsyncThunk('posts/deletePost', async initialPost => {\n  const {\n    id\n  } = initialPost;\n\n  try {\n    const response = await axios.delete(`${POSTS_URL}/${id}`);\n    if ((response === null || response === void 0 ? void 0 : response.status) === 200) return initialPost;\n    return `${response === null || response === void 0 ? void 0 : response.status}: ${response === null || response === void 0 ? void 0 : response.statusText}`;\n  } catch (err) {\n    return err.message;\n  }\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0\n            }\n          }\n        };\n      }\n\n    },\n\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    }\n\n  },\n\n  extraReducers(builder) {\n    builder.addCase(fetchPosts.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = 'succeeded'; // Adding date and reactions\n\n      let min = 1;\n      const loadedPosts = action.payload.map(post => {\n        post.date = sub(new Date(), {\n          minutes: min++\n        }).toISOString();\n        post.reactions = {\n          thumbsUp: 0,\n          wow: 0,\n          heart: 0,\n          rocket: 0,\n          coffee: 0\n        };\n        return post;\n      }); // Add any fetched posts to the array\n\n      state.posts = state.posts.concat(loadedPosts);\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addNewPost.fulfilled, (state, action) => {\n      // Fix for API post IDs:\n      // Creating sortedPosts & assigning the id \n      // would be not be needed if the fake API \n      // returned accurate new post IDs\n      const sortedPosts = state.posts.sort((a, b) => {\n        if (a.id > b.id) return 1;\n        if (a.id < b.id) return -1;\n        return 0;\n      });\n      action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1; // End fix for fake API post IDs \n\n      action.payload.userId = Number(action.payload.userId);\n      action.payload.date = new Date().toISOString();\n      action.payload.reactions = {\n        thumbsUp: 0,\n        wow: 0,\n        heart: 0,\n        rocket: 0,\n        coffee: 0\n      };\n      console.log(action.payload);\n      state.posts.push(action.payload);\n    }).addCase(updatePost.fulfilled, (state, action) => {\n      var _action$payload;\n\n      if (!((_action$payload = action.payload) !== null && _action$payload !== void 0 && _action$payload.id)) {\n        console.log('Update could not complete');\n        console.log(action.payload);\n        return;\n      }\n\n      const {\n        id\n      } = action.payload;\n      action.payload.date = new Date().toISOString();\n      const posts = state.posts.filter(post => post.id !== id);\n      state.posts = [...posts, action.payload];\n    }).addCase(deletePost.fulfilled, (state, action) => {\n      var _action$payload2;\n\n      if (!((_action$payload2 = action.payload) !== null && _action$payload2 !== void 0 && _action$payload2.id)) {\n        console.log('Delete could not complete');\n        console.log(action.payload);\n        return;\n      }\n\n      const {\n        id\n      } = action.payload;\n      const posts = state.posts.filter(post => post.id !== id);\n      state.posts = posts;\n    });\n  }\n\n});\nexport const selectAllPosts = state => state.posts.posts;\nexport const getPostsStatus = state => state.posts.status;\nexport const getPostsError = state => state.posts.error;\nexport const selectPostById = (state, postId) => state.posts.posts.find(post => post.id === postId);\nexport const {\n  postAdded,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","sub","axios","POSTS_URL","initialState","posts","status","error","fetchPosts","response","get","data","addNewPost","initialPost","post","updatePost","id","put","err","deletePost","delete","statusText","message","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","title","content","userId","date","Date","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","reactionAdded","postId","reaction","existingPost","find","extraReducers","builder","addCase","pending","fulfilled","min","loadedPosts","map","minutes","concat","rejected","sortedPosts","sort","a","b","length","Number","console","log","filter","selectAllPosts","getPostsStatus","getPostsError","selectPostById","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,gBAA9B,QAAsD,kBAAtD;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,SAAS,GAAG,4CAAlB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,MAAM,EAAE,MAFS;AAED;AAChBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAMA,OAAO,MAAMC,UAAU,GAAGR,gBAAgB,CAAC,kBAAD,EAAqB,YAAY;AACvE,QAAMS,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAUP,SAAV,CAAvB;AACA,SAAOM,QAAQ,CAACE,IAAhB;AACH,CAHyC,CAAnC;AAKP,OAAO,MAAMC,UAAU,GAAGZ,gBAAgB,CAAC,kBAAD,EAAqB,MAAOa,WAAP,IAAuB;AAClF,QAAMJ,QAAQ,GAAG,MAAMP,KAAK,CAACY,IAAN,CAAWX,SAAX,EAAsBU,WAAtB,CAAvB;AACA,SAAOJ,QAAQ,CAACE,IAAhB;AACH,CAHyC,CAAnC;AAKP,OAAO,MAAMI,UAAU,GAAGf,gBAAgB,CAAC,kBAAD,EAAqB,MAAOa,WAAP,IAAuB;AAClF,QAAM;AAAEG,IAAAA;AAAF,MAASH,WAAf;;AACA,MAAI;AACA,UAAMJ,QAAQ,GAAG,MAAMP,KAAK,CAACe,GAAN,CAAW,GAAEd,SAAU,IAAGa,EAAG,EAA7B,EAAgCH,WAAhC,CAAvB;AACA,WAAOJ,QAAQ,CAACE,IAAhB;AACH,GAHD,CAGE,OAAOO,GAAP,EAAY;AACV;AACA,WAAOL,WAAP,CAFU,CAEU;AACvB;AACJ,CATyC,CAAnC;AAWP,OAAO,MAAMM,UAAU,GAAGnB,gBAAgB,CAAC,kBAAD,EAAqB,MAAOa,WAAP,IAAuB;AAClF,QAAM;AAAEG,IAAAA;AAAF,MAASH,WAAf;;AACA,MAAI;AACA,UAAMJ,QAAQ,GAAG,MAAMP,KAAK,CAACkB,MAAN,CAAc,GAAEjB,SAAU,IAAGa,EAAG,EAAhC,CAAvB;AACA,QAAI,CAAAP,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEH,MAAV,MAAqB,GAAzB,EAA8B,OAAOO,WAAP;AAC9B,WAAQ,GAAEJ,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEH,MAAO,KAAIG,QAAxB,aAAwBA,QAAxB,uBAAwBA,QAAQ,CAAEY,UAAW,EAApD;AACH,GAJD,CAIE,OAAOH,GAAP,EAAY;AACV,WAAOA,GAAG,CAACI,OAAX;AACH;AACJ,CATyC,CAAnC;AAWP,MAAMC,UAAU,GAAGzB,WAAW,CAAC;AAC3B0B,EAAAA,IAAI,EAAE,OADqB;AAE3BpB,EAAAA,YAF2B;AAG3BqB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE;AACPC,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACnBD,QAAAA,KAAK,CAACvB,KAAN,CAAYyB,IAAZ,CAAiBD,MAAM,CAACE,OAAxB;AACH,OAHM;;AAIPC,MAAAA,OAAO,CAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyB;AAC5B,eAAO;AACHJ,UAAAA,OAAO,EAAE;AACLf,YAAAA,EAAE,EAAEjB,MAAM,EADL;AAELkC,YAAAA,KAFK;AAGLC,YAAAA,OAHK;AAILE,YAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAJD;AAKLH,YAAAA,MALK;AAMLI,YAAAA,SAAS,EAAE;AACPC,cAAAA,QAAQ,EAAE,CADH;AAEPC,cAAAA,GAAG,EAAE,CAFE;AAGPC,cAAAA,KAAK,EAAE,CAHA;AAIPC,cAAAA,MAAM,EAAE,CAJD;AAKPC,cAAAA,MAAM,EAAE;AALD;AANN;AADN,SAAP;AAgBH;;AArBM,KADL;;AAwBNC,IAAAA,aAAa,CAACjB,KAAD,EAAQC,MAAR,EAAgB;AACzB,YAAM;AAAEiB,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAuBlB,MAAM,CAACE,OAApC;AACA,YAAMiB,YAAY,GAAGpB,KAAK,CAACvB,KAAN,CAAY4C,IAAZ,CAAiBnC,IAAI,IAAIA,IAAI,CAACE,EAAL,KAAY8B,MAArC,CAArB;;AACA,UAAIE,YAAJ,EAAkB;AACdA,QAAAA,YAAY,CAACT,SAAb,CAAuBQ,QAAvB;AACH;AACJ;;AA9BK,GAHiB;;AAmC3BG,EAAAA,aAAa,CAACC,OAAD,EAAU;AACnBA,IAAAA,OAAO,CACFC,OADL,CACa5C,UAAU,CAAC6C,OADxB,EACiC,CAACzB,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACtB,MAAN,GAAe,SAAf;AACH,KAHL,EAIK8C,OAJL,CAIa5C,UAAU,CAAC8C,SAJxB,EAImC,CAAC1B,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACtB,MAAN,GAAe,WAAf,CAD8C,CAE9C;;AACA,UAAIiD,GAAG,GAAG,CAAV;AACA,YAAMC,WAAW,GAAG3B,MAAM,CAACE,OAAP,CAAe0B,GAAf,CAAmB3C,IAAI,IAAI;AAC3CA,QAAAA,IAAI,CAACsB,IAAL,GAAYnC,GAAG,CAAC,IAAIoC,IAAJ,EAAD,EAAa;AAAEqB,UAAAA,OAAO,EAAEH,GAAG;AAAd,SAAb,CAAH,CAAoCjB,WAApC,EAAZ;AACAxB,QAAAA,IAAI,CAACyB,SAAL,GAAiB;AACbC,UAAAA,QAAQ,EAAE,CADG;AAEbC,UAAAA,GAAG,EAAE,CAFQ;AAGbC,UAAAA,KAAK,EAAE,CAHM;AAIbC,UAAAA,MAAM,EAAE,CAJK;AAKbC,UAAAA,MAAM,EAAE;AALK,SAAjB;AAOA,eAAO9B,IAAP;AACH,OAVmB,CAApB,CAJ8C,CAgB9C;;AACAc,MAAAA,KAAK,CAACvB,KAAN,GAAcuB,KAAK,CAACvB,KAAN,CAAYsD,MAAZ,CAAmBH,WAAnB,CAAd;AACH,KAtBL,EAuBKJ,OAvBL,CAuBa5C,UAAU,CAACoD,QAvBxB,EAuBkC,CAAChC,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACtB,MAAN,GAAe,QAAf;AACAsB,MAAAA,KAAK,CAACrB,KAAN,GAAcsB,MAAM,CAACtB,KAAP,CAAae,OAA3B;AACH,KA1BL,EA2BK8B,OA3BL,CA2BaxC,UAAU,CAAC0C,SA3BxB,EA2BmC,CAAC1B,KAAD,EAAQC,MAAR,KAAmB;AAC9C;AACA;AACA;AACA;AACA,YAAMgC,WAAW,GAAGjC,KAAK,CAACvB,KAAN,CAAYyD,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC3C,YAAID,CAAC,CAAC/C,EAAF,GAAOgD,CAAC,CAAChD,EAAb,EAAiB,OAAO,CAAP;AACjB,YAAI+C,CAAC,CAAC/C,EAAF,GAAOgD,CAAC,CAAChD,EAAb,EAAiB,OAAO,CAAC,CAAR;AACjB,eAAO,CAAP;AACH,OAJmB,CAApB;AAKAa,MAAAA,MAAM,CAACE,OAAP,CAAef,EAAf,GAAoB6C,WAAW,CAACA,WAAW,CAACI,MAAZ,GAAqB,CAAtB,CAAX,CAAoCjD,EAApC,GAAyC,CAA7D,CAV8C,CAW9C;;AAEAa,MAAAA,MAAM,CAACE,OAAP,CAAeI,MAAf,GAAwB+B,MAAM,CAACrC,MAAM,CAACE,OAAP,CAAeI,MAAhB,CAA9B;AACAN,MAAAA,MAAM,CAACE,OAAP,CAAeK,IAAf,GAAsB,IAAIC,IAAJ,GAAWC,WAAX,EAAtB;AACAT,MAAAA,MAAM,CAACE,OAAP,CAAeQ,SAAf,GAA2B;AACvBC,QAAAA,QAAQ,EAAE,CADa;AAEvBC,QAAAA,GAAG,EAAE,CAFkB;AAGvBC,QAAAA,KAAK,EAAE,CAHgB;AAIvBC,QAAAA,MAAM,EAAE,CAJe;AAKvBC,QAAAA,MAAM,EAAE;AALe,OAA3B;AAOAuB,MAAAA,OAAO,CAACC,GAAR,CAAYvC,MAAM,CAACE,OAAnB;AACAH,MAAAA,KAAK,CAACvB,KAAN,CAAYyB,IAAZ,CAAiBD,MAAM,CAACE,OAAxB;AACH,KAnDL,EAoDKqB,OApDL,CAoDarC,UAAU,CAACuC,SApDxB,EAoDmC,CAAC1B,KAAD,EAAQC,MAAR,KAAmB;AAAA;;AAC9C,UAAI,qBAACA,MAAM,CAACE,OAAR,4CAAC,gBAAgBf,EAAjB,CAAJ,EAAyB;AACrBmD,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYvC,MAAM,CAACE,OAAnB;AACA;AACH;;AACD,YAAM;AAAEf,QAAAA;AAAF,UAASa,MAAM,CAACE,OAAtB;AACAF,MAAAA,MAAM,CAACE,OAAP,CAAeK,IAAf,GAAsB,IAAIC,IAAJ,GAAWC,WAAX,EAAtB;AACA,YAAMjC,KAAK,GAAGuB,KAAK,CAACvB,KAAN,CAAYgE,MAAZ,CAAmBvD,IAAI,IAAIA,IAAI,CAACE,EAAL,KAAYA,EAAvC,CAAd;AACAY,MAAAA,KAAK,CAACvB,KAAN,GAAc,CAAC,GAAGA,KAAJ,EAAWwB,MAAM,CAACE,OAAlB,CAAd;AACH,KA9DL,EA+DKqB,OA/DL,CA+DajC,UAAU,CAACmC,SA/DxB,EA+DmC,CAAC1B,KAAD,EAAQC,MAAR,KAAmB;AAAA;;AAC9C,UAAI,sBAACA,MAAM,CAACE,OAAR,6CAAC,iBAAgBf,EAAjB,CAAJ,EAAyB;AACrBmD,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYvC,MAAM,CAACE,OAAnB;AACA;AACH;;AACD,YAAM;AAAEf,QAAAA;AAAF,UAASa,MAAM,CAACE,OAAtB;AACA,YAAM1B,KAAK,GAAGuB,KAAK,CAACvB,KAAN,CAAYgE,MAAZ,CAAmBvD,IAAI,IAAIA,IAAI,CAACE,EAAL,KAAYA,EAAvC,CAAd;AACAY,MAAAA,KAAK,CAACvB,KAAN,GAAcA,KAAd;AACH,KAxEL;AAyEH;;AA7G0B,CAAD,CAA9B;AAgHA,OAAO,MAAMiE,cAAc,GAAI1C,KAAD,IAAWA,KAAK,CAACvB,KAAN,CAAYA,KAA9C;AACP,OAAO,MAAMkE,cAAc,GAAI3C,KAAD,IAAWA,KAAK,CAACvB,KAAN,CAAYC,MAA9C;AACP,OAAO,MAAMkE,aAAa,GAAI5C,KAAD,IAAWA,KAAK,CAACvB,KAAN,CAAYE,KAA7C;AAEP,OAAO,MAAMkE,cAAc,GAAG,CAAC7C,KAAD,EAAQkB,MAAR,KAC1BlB,KAAK,CAACvB,KAAN,CAAYA,KAAZ,CAAkB4C,IAAlB,CAAuBnC,IAAI,IAAIA,IAAI,CAACE,EAAL,KAAY8B,MAA3C,CADG;AAGP,OAAO,MAAM;AAAEpB,EAAAA,SAAF;AAAamB,EAAAA;AAAb,IAA+BtB,UAAU,CAACmD,OAAhD;AAEP,eAAenD,UAAU,CAACI,OAA1B","sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from 'date-fns';\nimport axios from \"axios\";\n\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\nconst initialState = {\n    posts: [],\n    status: 'idle', //'idle' | 'loading' | 'succeeded' | 'failed'\n    error: null\n}\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n    const response = await axios.get(POSTS_URL)\n    return response.data\n})\n\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async (initialPost) => {\n    const response = await axios.post(POSTS_URL, initialPost)\n    return response.data\n})\n\nexport const updatePost = createAsyncThunk('posts/updatePost', async (initialPost) => {\n    const { id } = initialPost;\n    try {\n        const response = await axios.put(`${POSTS_URL}/${id}`, initialPost)\n        return response.data\n    } catch (err) {\n        //return err.message;\n        return initialPost; // only for testing Redux!\n    }\n})\n\nexport const deletePost = createAsyncThunk('posts/deletePost', async (initialPost) => {\n    const { id } = initialPost;\n    try {\n        const response = await axios.delete(`${POSTS_URL}/${id}`)\n        if (response?.status === 200) return initialPost;\n        return `${response?.status}: ${response?.statusText}`;\n    } catch (err) {\n        return err.message;\n    }\n})\n\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        postAdded: {\n            reducer(state, action) {\n                state.posts.push(action.payload)\n            },\n            prepare(title, content, userId) {\n                return {\n                    payload: {\n                        id: nanoid(),\n                        title,\n                        content,\n                        date: new Date().toISOString(),\n                        userId,\n                        reactions: {\n                            thumbsUp: 0,\n                            wow: 0,\n                            heart: 0,\n                            rocket: 0,\n                            coffee: 0\n                        }\n                    }\n                }\n            }\n        },\n        reactionAdded(state, action) {\n            const { postId, reaction } = action.payload\n            const existingPost = state.posts.find(post => post.id === postId)\n            if (existingPost) {\n                existingPost.reactions[reaction]++\n            }\n        }\n    },\n    extraReducers(builder) {\n        builder\n            .addCase(fetchPosts.pending, (state, action) => {\n                state.status = 'loading'\n            })\n            .addCase(fetchPosts.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                // Adding date and reactions\n                let min = 1;\n                const loadedPosts = action.payload.map(post => {\n                    post.date = sub(new Date(), { minutes: min++ }).toISOString();\n                    post.reactions = {\n                        thumbsUp: 0,\n                        wow: 0,\n                        heart: 0,\n                        rocket: 0,\n                        coffee: 0\n                    }\n                    return post;\n                });\n\n                // Add any fetched posts to the array\n                state.posts = state.posts.concat(loadedPosts)\n            })\n            .addCase(fetchPosts.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(addNewPost.fulfilled, (state, action) => {\n                // Fix for API post IDs:\n                // Creating sortedPosts & assigning the id \n                // would be not be needed if the fake API \n                // returned accurate new post IDs\n                const sortedPosts = state.posts.sort((a, b) => {\n                    if (a.id > b.id) return 1\n                    if (a.id < b.id) return -1\n                    return 0\n                })\n                action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1;\n                // End fix for fake API post IDs \n\n                action.payload.userId = Number(action.payload.userId)\n                action.payload.date = new Date().toISOString();\n                action.payload.reactions = {\n                    thumbsUp: 0,\n                    wow: 0,\n                    heart: 0,\n                    rocket: 0,\n                    coffee: 0\n                }\n                console.log(action.payload)\n                state.posts.push(action.payload)\n            })\n            .addCase(updatePost.fulfilled, (state, action) => {\n                if (!action.payload?.id) {\n                    console.log('Update could not complete')\n                    console.log(action.payload)\n                    return;\n                }\n                const { id } = action.payload;\n                action.payload.date = new Date().toISOString();\n                const posts = state.posts.filter(post => post.id !== id);\n                state.posts = [...posts, action.payload];\n            })\n            .addCase(deletePost.fulfilled, (state, action) => {\n                if (!action.payload?.id) {\n                    console.log('Delete could not complete')\n                    console.log(action.payload)\n                    return;\n                }\n                const { id } = action.payload;\n                const posts = state.posts.filter(post => post.id !== id);\n                state.posts = posts;\n            })\n    }\n})\n\nexport const selectAllPosts = (state) => state.posts.posts;\nexport const getPostsStatus = (state) => state.posts.status;\nexport const getPostsError = (state) => state.posts.error;\n\nexport const selectPostById = (state, postId) =>\n    state.posts.posts.find(post => post.id === postId);\n\nexport const { postAdded, reactionAdded } = postsSlice.actions\n\nexport default postsSlice.reducer"]},"metadata":{},"sourceType":"module"}