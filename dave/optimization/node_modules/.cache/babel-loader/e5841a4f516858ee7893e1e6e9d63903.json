{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nimport axios from \"axios\";\nconst POSTS_URL = \"https://jsonplaceholder.typicode.com/posts\";\nconst initialState = {\n  posts: [],\n  status: \"idle\",\n  //'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null,\n  count: 0\n};\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  const response = await axios.get(POSTS_URL);\n  return response.data;\n});\nexport const addNewPost = createAsyncThunk(\"posts/addNewPost\", async initialPost => {\n  const response = await axios.post(POSTS_URL, initialPost);\n  return response.data;\n});\nexport const updatePost = createAsyncThunk(\"posts/updatePost\", async initialPost => {\n  const {\n    id\n  } = initialPost;\n\n  try {\n    const response = await axios.put(`${POSTS_URL}/${id}`, initialPost);\n    return response.data;\n  } catch (err) {\n    //return err.message;\n    return initialPost; // only for testing Redux!\n  }\n});\nexport const deletePost = createAsyncThunk(\"posts/deletePost\", async initialPost => {\n  const {\n    id\n  } = initialPost;\n\n  try {\n    const response = await axios.delete(`${POSTS_URL}/${id}`);\n    if ((response === null || response === void 0 ? void 0 : response.status) === 200) return initialPost;\n    return `${response === null || response === void 0 ? void 0 : response.status}: ${response === null || response === void 0 ? void 0 : response.statusText}`;\n  } catch (err) {\n    return err.message;\n  }\n});\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    }\n\n  },\n\n  extraReducers(builder) {\n    builder.addCase(fetchPosts.pending, (state, action) => {\n      state.status = \"loading\";\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = \"succeeded\"; // Adding date and reactions\n\n      let min = 1;\n      const loadedPosts = action.payload.map(post => {\n        post.date = sub(new Date(), {\n          minutes: min++\n        }).toISOString();\n        post.reactions = {\n          thumbsUp: 0,\n          wow: 0,\n          heart: 0,\n          rocket: 0,\n          coffee: 0\n        };\n        return post;\n      }); // Add any fetched posts to the array\n\n      state.posts = state.posts.concat(loadedPosts);\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    }).addCase(addNewPost.fulfilled, (state, action) => {\n      // Fix for API post IDs:\n      // Creating sortedPosts & assigning the id\n      // would be not be needed if the fake API\n      // returned accurate new post IDs\n      const sortedPosts = state.posts.sort((a, b) => {\n        if (a.id > b.id) return 1;\n        if (a.id < b.id) return -1;\n        return 0;\n      });\n      action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1; // End fix for fake API post IDs\n\n      action.payload.userId = Number(action.payload.userId);\n      action.payload.date = new Date().toISOString();\n      action.payload.reactions = {\n        thumbsUp: 0,\n        wow: 0,\n        heart: 0,\n        rocket: 0,\n        coffee: 0\n      };\n      console.log(action.payload);\n      state.posts.push(action.payload);\n    }).addCase(updatePost.fulfilled, (state, action) => {\n      var _action$payload;\n\n      if (!((_action$payload = action.payload) !== null && _action$payload !== void 0 && _action$payload.id)) {\n        console.log(\"Update could not complete\");\n        console.log(action.payload);\n        return;\n      }\n\n      const {\n        id\n      } = action.payload;\n      action.payload.date = new Date().toISOString();\n      const posts = state.posts.filter(post => post.id !== id);\n      state.posts = [...posts, action.payload];\n    }).addCase(deletePost.fulfilled, (state, action) => {\n      var _action$payload2;\n\n      if (!((_action$payload2 = action.payload) !== null && _action$payload2 !== void 0 && _action$payload2.id)) {\n        console.log(\"Delete could not complete\");\n        console.log(action.payload);\n        return;\n      }\n\n      const {\n        id\n      } = action.payload;\n      const posts = state.posts.filter(post => post.id !== id);\n      state.posts = posts;\n    });\n  }\n\n});\nexport const selectAllPosts = state => state.posts.posts;\nexport const getPostsStatus = state => state.posts.status;\nexport const getPostsError = state => state.posts.error;\nexport const selectPostById = (state, postId) => state.posts.posts.find(post => post.id === postId);\nexport const {\n  postAdded,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","sub","axios","POSTS_URL","initialState","posts","status","error","count","fetchPosts","response","get","data","addNewPost","initialPost","post","updatePost","id","put","err","deletePost","delete","statusText","message","postsSlice","name","reducers","reactionAdded","state","action","postId","reaction","payload","existingPost","find","reactions","extraReducers","builder","addCase","pending","fulfilled","min","loadedPosts","map","date","Date","minutes","toISOString","thumbsUp","wow","heart","rocket","coffee","concat","rejected","sortedPosts","sort","a","b","length","userId","Number","console","log","push","filter","selectAllPosts","getPostsStatus","getPostsError","selectPostById","postAdded","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nimport axios from \"axios\";\n\nconst POSTS_URL = \"https://jsonplaceholder.typicode.com/posts\";\n\nconst initialState = {\n  posts: [],\n  status: \"idle\", //'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null,\n  count: 0,\n};\n\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  const response = await axios.get(POSTS_URL);\n  return response.data;\n});\n\nexport const addNewPost = createAsyncThunk(\n  \"posts/addNewPost\",\n  async (initialPost) => {\n    const response = await axios.post(POSTS_URL, initialPost);\n    return response.data;\n  }\n);\n\nexport const updatePost = createAsyncThunk(\n  \"posts/updatePost\",\n  async (initialPost) => {\n    const { id } = initialPost;\n    try {\n      const response = await axios.put(`${POSTS_URL}/${id}`, initialPost);\n      return response.data;\n    } catch (err) {\n      //return err.message;\n      return initialPost; // only for testing Redux!\n    }\n  }\n);\n\nexport const deletePost = createAsyncThunk(\n  \"posts/deletePost\",\n  async (initialPost) => {\n    const { id } = initialPost;\n    try {\n      const response = await axios.delete(`${POSTS_URL}/${id}`);\n      if (response?.status === 200) return initialPost;\n      return `${response?.status}: ${response?.statusText}`;\n    } catch (err) {\n      return err.message;\n    }\n  }\n);\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload;\n      const existingPost = state.posts.find((post) => post.id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchPosts.pending, (state, action) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = \"succeeded\";\n        // Adding date and reactions\n        let min = 1;\n        const loadedPosts = action.payload.map((post) => {\n          post.date = sub(new Date(), { minutes: min++ }).toISOString();\n          post.reactions = {\n            thumbsUp: 0,\n            wow: 0,\n            heart: 0,\n            rocket: 0,\n            coffee: 0,\n          };\n          return post;\n        });\n\n        // Add any fetched posts to the array\n        state.posts = state.posts.concat(loadedPosts);\n      })\n      .addCase(fetchPosts.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.error.message;\n      })\n      .addCase(addNewPost.fulfilled, (state, action) => {\n        // Fix for API post IDs:\n        // Creating sortedPosts & assigning the id\n        // would be not be needed if the fake API\n        // returned accurate new post IDs\n        const sortedPosts = state.posts.sort((a, b) => {\n          if (a.id > b.id) return 1;\n          if (a.id < b.id) return -1;\n          return 0;\n        });\n        action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1;\n        // End fix for fake API post IDs\n\n        action.payload.userId = Number(action.payload.userId);\n        action.payload.date = new Date().toISOString();\n        action.payload.reactions = {\n          thumbsUp: 0,\n          wow: 0,\n          heart: 0,\n          rocket: 0,\n          coffee: 0,\n        };\n        console.log(action.payload);\n        state.posts.push(action.payload);\n      })\n      .addCase(updatePost.fulfilled, (state, action) => {\n        if (!action.payload?.id) {\n          console.log(\"Update could not complete\");\n          console.log(action.payload);\n          return;\n        }\n        const { id } = action.payload;\n        action.payload.date = new Date().toISOString();\n        const posts = state.posts.filter((post) => post.id !== id);\n        state.posts = [...posts, action.payload];\n      })\n      .addCase(deletePost.fulfilled, (state, action) => {\n        if (!action.payload?.id) {\n          console.log(\"Delete could not complete\");\n          console.log(action.payload);\n          return;\n        }\n        const { id } = action.payload;\n        const posts = state.posts.filter((post) => post.id !== id);\n        state.posts = posts;\n      });\n  },\n});\n\nexport const selectAllPosts = (state) => state.posts.posts;\nexport const getPostsStatus = (state) => state.posts.status;\nexport const getPostsError = (state) => state.posts.error;\n\nexport const selectPostById = (state, postId) =>\n  state.posts.posts.find((post) => post.id === postId);\n\nexport const { postAdded, reactionAdded } = postsSlice.actions;\n\nexport default postsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}