[{"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/index.js":"1","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/App.js":"2","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/app/store.js":"3","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/users/usersSlice.js":"4","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/postsSlice.js":"5","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/PostsList.js":"6","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/AddPostForm.js":"7","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/SinglePostPage.js":"8","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/EditPostForm.js":"9","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/components/Layout.js":"10","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/TimeAgo.js":"11","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/PostsExcerpt.js":"12","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/PostAuthor.js":"13","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/ReactionButtons.js":"14","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/components/Header.js":"15","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/users/UsersList.js":"16","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/users/UserPage.js":"17"},{"size":695,"mtime":1711615659833,"results":"18","hashOfConfig":"19"},{"size":1072,"mtime":1711633120758,"results":"20","hashOfConfig":"19"},{"size":285,"mtime":1711615659819,"results":"21","hashOfConfig":"19"},{"size":747,"mtime":1711631191283,"results":"22","hashOfConfig":"19"},{"size":5004,"mtime":1713220062589,"results":"23","hashOfConfig":"19"},{"size":837,"mtime":1711615659826,"results":"24","hashOfConfig":"19"},{"size":2668,"mtime":1711615659823,"results":"25","hashOfConfig":"19"},{"size":1006,"mtime":1711615659828,"results":"26","hashOfConfig":"19"},{"size":3698,"mtime":1711615659823,"results":"27","hashOfConfig":"19"},{"size":269,"mtime":1711615659821,"results":"28","hashOfConfig":"19"},{"size":405,"mtime":1711615659829,"results":"29","hashOfConfig":"19"},{"size":593,"mtime":1713220014376,"results":"30","hashOfConfig":"19"},{"size":338,"mtime":1711615659824,"results":"31","hashOfConfig":"19"},{"size":814,"mtime":1711615659827,"results":"32","hashOfConfig":"19"},{"size":720,"mtime":1713217889544,"results":"33","hashOfConfig":"19"},{"size":498,"mtime":1711631165001,"results":"34","hashOfConfig":"19"},{"size":737,"mtime":1713219951878,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tkma00",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/index.js",[],[],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/App.js",[],[],["90","91"],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/app/store.js",[],[],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/users/usersSlice.js",[],[],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/postsSlice.js",["92"],[],"import {\n  createSlice,\n  createAsyncThunk,\n  createSelector,\n  createEntityAdapter,\n} from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nimport axios from \"axios\";\n\nconst POSTS_URL = \"https://jsonplaceholder.typicode.com/posts\";\n\n\n\nconst initialState = {\n  posts: [],\n  status: \"idle\", //'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null,\n  count: 0,\n};\n\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  const response = await axios.get(POSTS_URL);\n  return response.data;\n});\n\nexport const addNewPost = createAsyncThunk(\n  \"posts/addNewPost\",\n  async (initialPost) => {\n    const response = await axios.post(POSTS_URL, initialPost);\n    return response.data;\n  }\n);\n\nexport const updatePost = createAsyncThunk(\n  \"posts/updatePost\",\n  async (initialPost) => {\n    const { id } = initialPost;\n    try {\n      const response = await axios.put(`${POSTS_URL}/${id}`, initialPost);\n      return response.data;\n    } catch (err) {\n      //return err.message;\n      return initialPost; // only for testing Redux!\n    }\n  }\n);\n\nexport const deletePost = createAsyncThunk(\n  \"posts/deletePost\",\n  async (initialPost) => {\n    const { id } = initialPost;\n    try {\n      const response = await axios.delete(`${POSTS_URL}/${id}`);\n      if (response?.status === 200) return initialPost;\n      return `${response?.status}: ${response?.statusText}`;\n    } catch (err) {\n      return err.message;\n    }\n  }\n);\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload;\n      const existingPost = state.posts.find((post) => post.id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n    increaseCount(state, action) {\n      state.count = state.count + 1;\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchPosts.pending, (state, action) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = \"succeeded\";\n        // Adding date and reactions\n        let min = 1;\n        const loadedPosts = action.payload.map((post) => {\n          post.date = sub(new Date(), { minutes: min++ }).toISOString();\n          post.reactions = {\n            thumbsUp: 0,\n            wow: 0,\n            heart: 0,\n            rocket: 0,\n            coffee: 0,\n          };\n          return post;\n        });\n\n        // Add any fetched posts to the array\n        state.posts = state.posts.concat(loadedPosts);\n      })\n      .addCase(fetchPosts.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.error.message;\n      })\n      .addCase(addNewPost.fulfilled, (state, action) => {\n        // Fix for API post IDs:\n        // Creating sortedPosts & assigning the id\n        // would be not be needed if the fake API\n        // returned accurate new post IDs\n        const sortedPosts = state.posts.sort((a, b) => {\n          if (a.id > b.id) return 1;\n          if (a.id < b.id) return -1;\n          return 0;\n        });\n        action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1;\n        // End fix for fake API post IDs\n\n        action.payload.userId = Number(action.payload.userId);\n        action.payload.date = new Date().toISOString();\n        action.payload.reactions = {\n          thumbsUp: 0,\n          wow: 0,\n          heart: 0,\n          rocket: 0,\n          coffee: 0,\n        };\n        console.log(action.payload);\n        state.posts.push(action.payload);\n      })\n      .addCase(updatePost.fulfilled, (state, action) => {\n        if (!action.payload?.id) {\n          console.log(\"Update could not complete\");\n          console.log(action.payload);\n          return;\n        }\n        const { id } = action.payload;\n        action.payload.date = new Date().toISOString();\n        const posts = state.posts.filter((post) => post.id !== id);\n        state.posts = [...posts, action.payload];\n      })\n      .addCase(deletePost.fulfilled, (state, action) => {\n        if (!action.payload?.id) {\n          console.log(\"Delete could not complete\");\n          console.log(action.payload);\n          return;\n        }\n        const { id } = action.payload;\n        const posts = state.posts.filter((post) => post.id !== id);\n        state.posts = posts;\n      });\n  },\n});\n\nexport const selectAllPosts = (state) => state.posts.posts;\nexport const getPostsStatus = (state) => state.posts.status;\nexport const getPostsError = (state) => state.posts.error;\nexport const getCount = (state) => state.posts.count;\n\nexport const selectPostById = (state, postId) =>\n  state.posts.posts.find((post) => post.id === postId);\n\nexport const selectPostsByUser = createSelector(\n  [selectAllPosts, (state, userId) => userId],\n  (posts, userId) => posts.filter((post) => post.userId === userId)\n);\n\nexport const { increaseCount, reactionAdded } = postsSlice.actions;\n\nexport default postsSlice.reducer;\n","/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/PostsList.js",[],[],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/AddPostForm.js",[],[],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/SinglePostPage.js",[],[],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/EditPostForm.js",[],[],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/components/Layout.js",[],[],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/TimeAgo.js",[],[],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/PostsExcerpt.js",[],[],["93","94"],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/PostAuthor.js",[],[],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/posts/ReactionButtons.js",[],[],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/components/Header.js",[],[],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/users/UsersList.js",[],[],"/Users/jinwoohan/Documents/GitHub/redux-in-action/dave/optimization/src/features/users/UserPage.js",[],[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":5,"column":3,"nodeType":"101","messageId":"102","endLine":5,"endColumn":22},{"ruleId":"95","replacedBy":"103"},{"ruleId":"97","replacedBy":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'createEntityAdapter' is defined but never used.","Identifier","unusedVar",["105"],["106"],"no-global-assign","no-unsafe-negation"]